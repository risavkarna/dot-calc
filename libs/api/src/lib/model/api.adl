module api {

struct EmailStruct {
  String userid;
  String org;
  String full;
};

struct Empty {};

struct TimeStampInts {
  Int32 hh;
  Int32 mm;
  Int32 ss;
  Int32 ms;
  Int32 us;
};

type Jwt = String;
type Email = String;
type Password = String;

newtype UserId = String;

// A UTC timestamp in iso8601 format
newtype TimeStamp = String;

// A post request with request body of type I, and response
// body of type O
struct HttpPost<I,O> {
  String path;
  HttpSecurity security;
  TypeToken<I> reqType = null;
  TypeToken<O> respType = null;
};

union HttpSecurity {
  // The endpoint is publically accessible
  Void public;

  // A JWT is required in a bearer Authorization header
  Void token;

  // A JWT with an admin claim is required in a bearer Authorization header
  Void adminToken;
};


struct Api {
  /// Login to obtain an authorization token
  HttpPost<LoginReq,LoginResp> login = {
    "path" : "/login",
    "security" : "public"
  };

  /// Retrieve recent messages posted to the server
  HttpPost<RecentMessagesReq,Vector<Message>> recentMessages = {
    "path" : "/recent-messages",
    "security" : "token"
  };

  /// Post a new message
  HttpPost<NewMessageReq,Empty> newMessage = {
    "path" : "/new-message",
    "security" : "token"
  };

  /// Create a new user, recording their hashed password
  HttpPost<CreateUserReq,CreateUserResp> createUser = {
    "path" : "/create-user",
    "security" : "adminToken"
  };

  /// Trivial public method to test server liveness
  HttpPost<Empty,Empty> ping = {
    "path" : "/ping",
    "security" : "public"
  };
};

struct LoginReq {
  Email email;
  String password;
};

union LoginResp {
  Jwt success;
  Void failure;
};

struct NewMessageReq {
  String body;
};

struct RecentMessagesReq {
  Int32 maxMessages;
};

struct CreateUserReq {
  Email email;
  Password password;
  Bool isAdmin;
};

union CreateUserResp {
  UserId success;
  Void duplicateEmail;
};

struct Message {
  String id;
  Email postedBy;
  TimeStamp postedAt;
  String body;
};

type FilePath = String;

struct SslConfiguration {
  FilePath certificate;
  FilePath certificateKey;
};

union Protocol {
  Void http;
  SslConfiguration https;
};

union LogLevel {
  Void error;
  Void warn;
  Void info;
  Void debug;
  Void trace;
};


/// The schema for the server's YAML configuration file
struct ServerConfig {

  /// The port which accepts http connections
  Int32 port = 8080;

  /// The secret used to sign the server's json web tokens
  String jwtSecret;

  Protocol protocol = "http";
  LogLevel logLevel = "info";

};

struct AppMessage {
  String id;
  String appName;
  AppState state;
  Email postedBy;
  TimeStamp postedAt;
  String body;
};

struct AppState {
  ServerConfig server;
  Vector<String> users;
  Vector<AppMessage> messages;
};

};
